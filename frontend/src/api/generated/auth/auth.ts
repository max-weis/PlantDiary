/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Auth API
 * Simple email/password authentication API using JWT in HTTP-only cookies.
 * OpenAPI spec version: 1.0.0
 */
import type { LoginRequest, SignupRequest, TokenResponse } from ".././model";
import { customInstance } from "../../mutator/custom-instance";

export const getAuth = () => {
  /**
   * @summary Register a new user
   */
  const signup = (signupRequest: SignupRequest) => {
    return customInstance<void>({
      url: `/api/signup`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signupRequest,
    });
  };
  /**
   * @summary Authenticate a user and set session cookie
   */
  const login = (loginRequest: LoginRequest) => {
    return customInstance<TokenResponse>({
      url: `/api/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginRequest,
    });
  };
  /**
   * @summary Refresh access token using refresh token
   */
  const refreshToken = () => {
    return customInstance<TokenResponse>({
      url: `/api/refresh`,
      method: "POST",
    });
  };
  /**
   * @summary Logout user and invalidate refresh token
   */
  const logout = () => {
    return customInstance<void>({ url: `/api/logout`, method: "POST" });
  };
  return { signup, login, refreshToken, logout };
};
export type SignupResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuth>["signup"]>>
>;
export type LoginResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuth>["login"]>>
>;
export type RefreshTokenResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuth>["refreshToken"]>>
>;
export type LogoutResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuth>["logout"]>>
>;
